# Android environment variables # {{{1
export HOME2="/local/mnt/workspace/plafayet"
export ANDROID_HOME="/prj/webtech_yyz1/plafayet/quic-ics-chocolate"
export ANDROID_TARGET="msm8660_surf"
export ANDROID_IMG_SRC_DIR="$HOME2/png_images"
export ANDROID_IMG_OUT_DIR="$HOME2/png_images/out"
export ANDROID_BUILD_TOP=$ANDROID_HOME
export ANDROID_TOOLCHAIN="$ANDROID_HOME/prebuilt/linux-x86/toolchain/arm-linux-androideabi-4.4.x/bin"
export ANDROID_SDK="$HOME2/android-sdk-linux_x86_r14/android-sdk-linux"
export ANDROID_SDK_PLATFORM_TOOLS="$ANDROID_SDK/platform-tools"
export ANDROID_SDK_TOOLS="$ANDROID_SDK/tools"
export ANDROID_PRODUCT_OUT="$ANDROID_HOME/out/target/product/$ANDROID_TARGET"
export ANDROID_SWT="$ANDROID_SDK/tools/lib/x86_64"
export ANDROID_DUMPRENDERTREE="$HOME2/dumprendertree"
#export USE_CCACHE=1
export CSCOPE_DB="$ANDROID_HOME/cscope"

# Add tools and toolchain to path
export PATH="$ANDROID_SDK_PLATFORM_TOOLS:$PATH:$ANDROID_SDK_TOOLS:$ANDROID_DUMPRENDERTREE"
export PATH="$PATH:$ANDROID_TOOLCHAIN"
export PATH=`path.sh`

# Android utility functions # {{{1

function android_kill_process {
    process=`adb shell ps | grep $1 | awk '{print $2}' | sed -e 's/  *$//'`

    if [ -n "$process" ]; then
        echo "Killing $1 process id $process"
        adb shell kill $process
    fi
}

function android_cpu_freq {
    adb shell cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq
    adb shell cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_cur_freq
}

function android_cpu_scaling {
    adb shell cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
    adb shell cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor
}

function android_disable_cpu_scaling {
    adb shell "echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor"
}

function android_swap_interval {
    adb shell stop
    adb shell setprop debug.gr.swapinterval 0
    adb shell start
}

function android_product_out {
    export ANDROID_PRODUCT_OUT="$ANDROID_HOME/out/target/product/msm7630_surf"
    echo $ANDROID_PRODUCT_OUT
}

function android_mount_debug_fs {
    adb shell "mkdir /system/debug; mount -t debugfs none /system/debug"
}

function android_vg_clock_speed {
    adb shell "cat /system/debug/clk/grp_2d_clk/measure"
}

function android_remount {
    adb shell mount -o rw,remount -t yaffs2 /dev/block/mtdblock3 /system
}

function android_viewer {
    adb shell am start -a android.intent.action.VIEW -n \
    com.android.htmlviewer/.HTMLViewerActivity -d "$1" &
}

function android_browser {
    adb shell am start -a android.intent.action.VIEW -n \
    com.android.browser/.BrowserActivity -d "$1" &
}

function android_browser_net {
    adb shell am start -a android.intent.action.VIEW -n \
    com.android.browser/.BrowserActivity -d "http://$1" &
}

function android_browser_local {
    adb shell am start -a android.intent.action.VIEW -n \
    com.android.browser/.BrowserActivity -d "file:///data/$1" &
}

function android_push_egl {
    android_remount
    adb shell stop
    adb push $ANDROID_PRODUCT_OUT/system/lib/egl/lib$1.so /system/lib/egl/
    adb shell start
}

function android_push_lib {
    android_remount
    adb shell stop
    adb push $ANDROID_PRODUCT_OUT/system/lib/lib$1.so /system/lib
    adb shell start
}

function android_push_lib_in {
    android_remount
    adb shell stop
    adb push $2/lib$1.so /system/lib
    adb shell start
}

function android_push_bin {
    android_remount
    adb push $ANDROID_PRODUCT_OUT/system/bin/$1 /system/bin
}

function android_flash_system_in {
    sudo fastboot flash system $1/system.img.ext4
}

function android_flash_nand_system_in {
    sudo fastboot flash system $1/system.img
}

function android_flash_system {
    sudo fastboot flash system $ANDROID_PRODUCT_OUT/system.img.ext4
}

function android_flash_nand_system {
    sudo fastboot flash system $ANDROID_PRODUCT_OUT/system.img
}

function android_flash_all_in {
    sudo fastboot flash userdata $1/userdata.img.ext4
    sudo fastboot flash system $1/system.img.ext4
    sudo fastboot flash persist $1/persist.img.ext4
    sudo fastboot boot $1/boot.img
}

function android_flash_nand_all_in {
    sudo fastboot flash userdata $1/userdata.img
    sudo fastboot flash system $1/system.img
    sudo fastboot flash persist $1/persist.img
    sudo fastboot boot $1/boot.img
}

function android_flash_all {
    sudo fastboot flash userdata $ANDROID_PRODUCT_OUT/userdata.img.ext4
    sudo fastboot flash system $ANDROID_PRODUCT_OUT/system.img.ext4
    sudo fastboot flash persist $ANDROID_PRODUCT_OUT/persist.img.ext4
    sudo fastboot boot $ANDROID_PRODUCT_OUT/boot.img
}

function android_flash_nand_all {
    sudo fastboot flash userdata $ANDROID_PRODUCT_OUT/userdata.img
    sudo fastboot flash system $ANDROID_PRODUCT_OUT/system.img
    sudo fastboot flash persist $ANDROID_PRODUCT_OUT/persist.img
    sudo fastboot boot $ANDROID_PRODUCT_OUT/boot.img
}

function android_flash_modem_in {
    sudo fastboot flash sbl1 $1/sbl1.mbn
    sudo fastboot flash sbl2 $1/sbl2.mbn
    sudo fastboot flash sbl3 $1/sbl3.mbn
    sudo fastboot flash rpm $1/rpm.mbn
    sudo fastboot flash tz $1/tz.mbn
    sudo fastboot flash modem $1/NON-HLOS.bin
    sudo fastboot flash aboot $1/emmc_appsboot.mbn
}

function android_debug_browser {
    pd $ANDROID_HOME
    gdbclient app_process :5039 com.android.browser
}

function android_debug_port_browser {
    pd $ANDROID_HOME
    gdbclient app_process :$1 com.android.browser
}

function android_boot {
    sudo fastboot boot $ANDROID_PRODUCT_OUT/boot.img
}

function android_boot_in {
    sudo fastboot boot $1/boot.img
}

function android_crash_backtrace {
    $ANDROID_HOME/development/scripts/stack --symbols-dir=$ANDROID_PRODUCT_OUT/symbols $1
}

function android_media_volume {
    database='cd /data/data/com.android.providers.settings/databases;'
    adjust_volume="insert into system(name, value) values ('volume_music', $1);"
    adb shell $database sqlite3 settings.db \"$adjust_volume\"
}

function android_display_timeout_off {
    database='cd /data/data/com.android.providers.settings/databases;'
    screen_off="insert into system(name, value) values ('screen_off_timeout', -1);"
    dim_screen="insert into system(name, value) values ('dim_screen', 1);"
    stay_on="insert into system(name, value) values ('stay_on_while_plugged_in', 3);"
    adb shell $database sqlite3 settings.db \"$screen_off $dim_screen $stay_on\"
}

function android_init_volume_display_low {
    adb shell stop
    android_media_volume 4
    android_display_timeout_off
    adb shell start
}

function android_reset {
    adb shell stop
    adb shell start
}

function android_browser_plafayet {
    android_browser_net plafayet-linux.qualcomm.com
}

function android_ethernet_up {
    adb shell netcfg eth0 up
    adb shell netcfg eth0 dhcp
    adb shell route add default gw `adb shell getprop net.eth0.gw` dev eth0
    adb shell netcfg
    adb shell setprop net.dns1 129.46.50.7
    adb shell setprop net.dns2 129.46.55.20
}

function android_setup_environment {
    pd $ANDROID_HOME
    . build/envsetup.sh
    choosecombo 1 1 $ANDROID_TARGET eng
}

# Unlock the lock screen.
function android_unlock {
    adb shell input keyevent 82
}

function android_reinstall_browser {
    android_remount
    adb shell rm /system/app/Browser.apk
    adb uninstall com.android.browser
    adb install $ANDROID_PRODUCT_OUT/system/app/Browser.apk
}

function android_reinstall_framework {
    android_remount
    adb shell stop
    adb push $ANDROID_PRODUCT_OUT/system/framework/framework.jar /system/framework
    adb shell start
}

function android_mount_ext3 {
    adb shell mount -t ext4 /dev/block/mmcblk1p1 /sdcard
}

function android_set_wifi_8960 {
    adb shell stop
    adb shell mount -rw -o remount -t ext4 /dev/block/mmcblk0p12 /system
    adb push WCNSS_qcom.cfg.ini /data/misc/wifi/
    adb shell start
}

alias logtime="adb logcat WebCore:* *:S"
alias logvg="adb logcat webcore:* webcore_test:* webcoreglue:* graphicscontextopenvg:* graphicscontextandroid:* painteropenvg:* surfaceopenvg:* frameview:* renderobject:* skia:* DEBUG:* WebCore:* *:S"
alias clc="adb logcat -c"
alias mm="time mm"

function clog {
  $@ | coloredlogcat.py
}

# vi:set ft=sh fdm=marker sw=4 ts=4:
